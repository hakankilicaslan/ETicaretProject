/*
    Microservice sisteminde her alan için ayrı ayrı module'ler açıyoruz.
    Dependencies.gradle bütün module'ler build.gradle dosyalarında kullanılacak bağımlılıkları tek çatı altında topluyoruz.
    Versions kısmında bağımlılıklarda versiyon değişmesi durumunda sadece buradan değiştireceğiz.
    Bu şekilde tek tek güncellemek yerine versiyonun etki ettiği her yerde değişmiş olacak.
    Key olarak bir isim verip iki nokta üst üste koyup çift tırnak içinde veriyonumuzu yazıyoruz.

    Libs kısımında Key-Value şeklinde bağımlılık listesi oluşturacağız.
    1. Bağımlılığa bir ad belirleyip iki nokta üst üste koyacağız.
    2. Projenin group-id sini yazıp iki nokta üst üste koyacağız.
    3. Projenin artifact-id sini yazıp iki nokta üst üste koyacağız.
    4. Versiyon numarasını yazıp veya yukarıda o versiyonun numarasını tuttuğumuz key değerini ekleyeceğiz.
*/
ext{
    versions=[
        springBoot      :"2.7.17",
        springCloud     :"3.1.8",
        lombok          :"1.18.30",
        mapstruct       :"1.5.5.Final",
        postgres        :"42.3.8",
        swagger         :"1.6.15",
        jwt             :"4.4.0",
        circuitBreaker  :"2.1.7"

    ]

    libs=[
        springBootWeb                       :"org.springframework.boot:spring-boot-starter-web:$versions.springBoot",
        springBootDataJpa                   :"org.springframework.boot:spring-boot-starter-data-jpa:$versions.springBoot",
        springBootDataMongoDB               :"org.springframework.boot:spring-boot-starter-data-mongodb:$versions.springBoot",
        springBootDataRedis                 :"org.springframework.boot:spring-boot-starter-data-redis:$versions.springBoot",
        springBootValidation                :"org.springframework.boot:spring-boot-starter-validation:$versions.springBoot",
        springBootAmqp                      :"org.springframework.boot:spring-boot-starter-amqp:$versions.springBoot",
        springBootSecurity                  :"org.springframework.boot:spring-boot-starter-security:$versions.springBoot",

        springCloudOpenFeign                :"org.springframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",
        springCloudConfigServer             :"org.springframework.cloud:spring-cloud-config-server:$versions.springCloud",
        springCloudStarterConfig            :"org.springframework.cloud:spring-cloud-starter-config:$versions.springCloud",
        springCloudConfigClient             :"org.springframework.cloud:spring-cloud-config-client:$versions.springCloud",

        springCloudGateway                  :"org.springframework.cloud:spring-cloud-starter-gateway:$versions.springCloud",
        springCloudCircuitBreaker           :"org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$versions.circuitBreaker",
        springCloudCircuitBreakerReactor    :"org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:$versions.circuitBreaker",

        springCloudSleuth                   :"org.springframework.cloud:spring-cloud-starter-sleuth:$versions.springCloud",
        springCloudSleuthZipkin             :"org.springframework.cloud:spring-cloud-sleuth-zipkin:$versions.springCloud",

        lombok                              :"org.projectlombok:lombok:$versions.lombok",
        mapstruct                           :"org.mapstruct:mapstruct:$versions.mapstruct",
        mapstructProcessor                  :"org.mapstruct:mapstruct-processor:$versions.mapstruct",

        postgres                            :"org.postgresql:postgresql:$versions.postgres",

        swagger                             :"org.springdoc:springdoc-openapi-ui:$versions.swagger",

        jwt                                 :"com.auth0:java-jwt:$versions.jwt"
    ]
}